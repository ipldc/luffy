Lab exp - 03

Bit Stuffing:

import java.util.*;

class sample{
  public static void main(String args[]){
    Scanner s = new Scanner(System.in);
      String b = s.nextLine();
      String result = bitStuff(b);
      System.out.println(b);
      System.out.println(result);
      }
      
  public static String bitStuff(String str){
  StringBuilder sb = new StringBuilder();
    int c=0;
    for(char a:str.toCharArray()){
      sb.append(a);
      if(a == '1'){
        c++;
        if(c>=5){
          sb.append('0');
          c=0;
          }
      }
      
      else{
        c=0;
        }
    }
    return sb.toString();
        
    }
    }

Character Stuffing:

import java.util.*;

class sample{
  public static void main(String args[]){
      Scanner s = new Scanner(System.in);
      int n = s.nextInt();
      String arr[] = new String[n];
      for(int i=0; i<n; i++){
        arr[i]=s.next();
      }
      for(int i=0; i<n; i++){
        if (arr[i].equals("dle")){
          arr[i] = "dle dle";
        }
      }
      System.out.print("dle stx ");
      for(int i=0; i<n; i++){
        System.out.print(arr[i]+" ");  
      }
      System.out.print("dle etx");
      
  }
  }

Lab exp-04

Stop and Wait:

sender:

import java.util.*;
import java.io.*;
import java.net.*;

class sender{
    public static void main(String[] args) throws Exception{
        Scanner s = new Scanner(System.in);
        Socket soc = new Socket("localhost",12345);
        System.out.println("Connected to receiver");  
        System.out.print("Enter data to send: ");        
        String str = s.nextLine();
        PrintStream out = new PrintStream(soc.getOutputStream());
        for(char a:str.toCharArray()){
            System.out.println("data sent = "+a);
            out.println(a);
            System.out.println("waiting for Ack........"); 
            System.out.println("receiver packet received"); 
        }
        System.out.println("All data packet sent, Exiting.");        
    }
}

Receiver:

import java.util.*;
import java.io.*;
import java.net.*;
import java.awt.*;

class receiver{
    public static void main(String[] args) throws Exception{
        ServerSocket ssoc = new ServerSocket(12345);
        Socket soc = ssoc.accept();
        DataInputStream in = new DataInputStream(soc.getInputStream());
        int i = 0;

        String msg;
        while((msg = in.readLine())!=null){
            System.out.println("received = "+msg);
            i++;
        }
        System.out.println("Received all data packets");     
    }
}

Sliding window

sender:
import java.util.*;
import java.io.*;
import java.net.*;

class sender{
    public static void main(String[] args) throws Exception{
        Scanner s = new Scanner(System.in);
        Socket soc = new Socket("localhost",12345);
        System.out.print("Enter the no. of frames: ");        
        int n = s.nextInt();
        s.nextLine();
        String arr[] = new String[n];
        System.out.println("Enter "+n+" messages to send: ");        
        for(int i=0; i<n; i++){
            arr[i] = s.nextLine();
        }
        PrintStream out = new PrintStream(soc.getOutputStream());
        for(String temp:arr){
            out.println(temp);
        }
        System.out.println("Acknowledgement Received");        
    }
}

Receiver:

import java.util.*;
import java.io.*;
import java.net.*;

class receiver{
    public static void main(String[] args) throws Exception{
        ServerSocket ssoc = new ServerSocket(12345);
        Socket soc = ssoc.accept();
        DataInputStream in = new DataInputStream(soc.getInputStream());
        int i = 0;
        String msg;
        while((msg = in.readLine())!=null){
            System.out.println("The received frame "+i+" is : "+msg);
            i++;
        }
        System.out.println("Acknowledgement sent");     
    }
}



Lab exp - 05

Ping:

sneder:

import java.util.*;
import java.io.*;
import java.net.*;

class sender{
    public static void main(String[] args) throws Exception{
        Scanner s = new Scanner(System.in);
        Socket soc = new Socket("localhost",12345);
        System.out.print("Enter the IP address: ");
        String ip = s.nextLine();
        PrintStream out = new PrintStream(soc.getOutputStream());
        DataInputStream dis = new DataInputStream(soc.getInputStream());
        
        
        int i = 0;
        while(i<4){
            long t1 = System.currentTimeMillis();
            out.println(ip);
            System.out.println(dis.readLine());
            long t2 = System.currentTimeMillis();
            System.out.println("TTl : "+(t2-t1)+"bytes : 32   Time : "+(t1+t2-3400000000));
            i++;
        }
    }
}

receiver:

import java.util.*;
import java.net.*;
import java.io.*;


class receiver{
    public static void main(String[] args) throws Exception{
        ServerSocket ss = new ServerSocket(12345);
        Socket soc = ss.accept();
        DataInputStream dis = new DataInputStream(soc.getInputStream());
        PrintStream out = new PrintStream(soc.getOutputStream());
        int i=0;
        while(i<4){
            String msg = dis.readLine();
            out.println("Replying to "+msg+" : ");
            i++;
        }
        
    }
}

Traceroute:

import java.util.*;
import java.io.*;
import java.net.*;

class sample{
    public static void main(String args[]) throws Exception{
        Scanner s = new Scanner(System.in);
        System.out.print("Enter The IP Address: ");
        String ip = s.nextLine();
        Runtime h = Runtime.getRuntime();
        Process p = h.exec("traceroute "+ip);
        DataInputStream dis = new DataInputStream(p.getInputStream());
        String str;
        while((str = dis.readLine())!=null){
            System.out.println(str);
        }
    }
}

Lab Exp - 07

sender:

import java.util.*;
import java.io.*;
import java.net.*;

class sender{
    public static void main(String[] args) throws Exception{
        Scanner s = new Scanner(System.in);
        Socket soc = new Socket("localhost",12345);
        System.out.print("Enter a Message to send to Server: ");        
        String str = s.nextLine();
        PrintStream out = new PrintStream(soc.getOutputStream());
        out.println(str);
    }
}

receiver:

import java.util.*;
import java.io.*;
import java.net.*;


class receiver{
    public static void main(String[] args) throws Exception{
        ServerSocket ssoc = new ServerSocket(12345);
        Socket soc = ssoc.accept();
        DataInputStream in = new DataInputStream(soc.getInputStream());
        String msg = in.readLine();
        System.out.print("Received message from client: "+msg);
        
    }
}

Exp - 08

Sender:

import java.util.*;
import java.io.*;
import java.net.*;

class sender{
    public static void main(String[] args) throws Exception{
        Scanner s = new Scanner(System.in);
        Socket soc = new Socket("localhost",12345);
        String str = s.nextLine();
        PrintStream out = new PrintStream(soc.getOutputStream());
        out.println(str);
    }
}

Receiver:

import java.util.*;
import java.net.*;
import java.io.*;
import java.awt.*;

class receiver{
    public static void main(String[] args) throws Exception{
        ServerSocket ss = new ServerSocket(12345);
        Socket soc = ss.accept();
        DataInputStream dis = new DataInputStream(soc.getInputStream());
        File f = new File(dis.readLine());
        Desktop d = Desktop.getDesktop();
        System.out.println("Server waiting for image...");
        System.out.println("Received image Successfully.");
        d.open(f);
        
    }
}

Lab Exp - 9

subnet:

import java.util.Scanner;

class Subnet {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("IP address: ");
        String ip = sc.nextLine();
        String bip = "";

        for (String part : ip.split("\\.")) {
            bip += String.format("%8s", Integer.toBinaryString(Integer.parseInt(part))).replace(' ', '0');
        }

        System.out.println("Binary Format: " + bip);
        System.out.print("Enter the number of addresses in each subnet: ");
        int n = sc.nextInt();

        int bits = (int) Math.ceil(Math.log(n) / Math.log(2));
        int mask = 32 - bits;
        System.out.println("Subnet mask = " + mask);

        String fip = bip.substring(0, 32 - bits) + "0".repeat(bits);
        String lip = bip.substring(0, 32 - bits) + "1".repeat(bits);

        System.out.print("Network address is = ");
        printAddress(fip);
        System.out.print("Broadcast address is = ");
        printAddress(lip);
    }

    static void printAddress(String bin) {
        for (int i = 0; i < 4; i++) {
            System.out.print(Integer.parseInt(bin.substring(8 * i, 8 * i + 8), 2));
            if (i != 3) System.out.print(".");
        }
        System.out.println();
    }
}
