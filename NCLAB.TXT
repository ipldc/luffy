/EXP-3
Bit Stuffing

import java.util.*;
public class BitStuffing {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the data stream: ");
        String dataStream = sc.nextLine();
        String stuffedStream = bitStuffing(dataStream);
        System.out.println("Original Data Stream: " + dataStream);
        System.out.println("Stuffed Data Stream: " + stuffedStream);
        sc.close();
    }
    public static String bitStuffing(String dataStream) {
        StringBuilder stuffedStream = new StringBuilder();
        int consecutiveOnes = 0;
        for (int i = 0; i < dataStream.length(); i++) {
            char bit = dataStream.charAt(i);
            stuffedStream.append(bit);
            consecutiveOnes = (bit == '1') ? consecutiveOnes + 1 : 0;
            if (consecutiveOnes == 5) {
                stuffedStream.append('0');
                consecutiveOnes = 0;
            }
        }
        return stuffedStream.toString();
    }
}

================================
Character Stuffing

import java.util.*;
class Char {
    public static void main(String r[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of characters: ");
        int n = sc.nextInt();
        String in [] = new String[n];
        System.out.println("Enter characters: ");
        for (int i = 0; i < n; i++) { in [i] = sc.next();
        }
        for (int i = 0; i < n; i++) {
            if ( in [i].equals("dle")) { in [i] = "dle dle";
            }
        }
        System.out.println("Transmitted message is: ");
        System.out.print(" dle stx ");
        for (int i = 0; i < n; i++) {
            System.out.print( in [i] + " ");
        }
        System.out.println(" dle etx ");
    }
}
===================================================

//EXP-4
STOP AND WAIT

Sender:

import java.io.*;
import java.net.*;
public class Sender {
    Socket sender;
    ObjectOutputStream out;
    ObjectInputStream in ;
    String packet, ack, str, msg;
    int n, i = 0, sequence = 0;
    Sender() {}
    public void run() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            System.out.println("Waiting for Connection....");
            sender = new Socket("localhost", 2004);
            sequence = 0;
            out = new ObjectOutputStream(sender.getOutputStream());
            out.flush(); in = new ObjectInputStream(sender.getInputStream());
            str = (String) in .readObject();
            System.out.println("receiver > " + str);
            System.out.println("Enter the data to send....");
            packet = br.readLine();
            n = packet.length();
            do {
                try {
                    if (i < n) {
                        msg = String.valueOf(sequence);
                        msg = msg.concat(packet.substring(i, i + 1));
                    } else if (i == n) {
                        msg = "end";
                        out.writeObject(msg);
                        break;
                    }
                    out.writeObject(msg);
                    sequence = (sequence == 0) ? 1 : 0;
                    out.flush();
                    System.out.println("data sent>" + msg);
                    ack = (String) in .readObject();
                    System.out.println("waiting for ack.....\n\n");
                    if (ack.equals(String.valueOf(sequence))) {
                        i++;
                        System.out.println("receiver > " + " packet recieved\n\n");
                    } else {
                        System.out.println("Time out resending data....\n\n");
                        sequence = (sequence == 0) ? 1 : 0;
                    }
                } catch (Exception e) {}
            } while (i < n + 1);
            System.out.println("All data sent. exiting.");
        } catch (Exception e) {} finally {
            try { in .close();
                out.close();
                sender.close();
            } catch (Exception e) {}
        }
    }
    public static void main(String args[]) {
        Sender s = new Sender();
        s.run();
    }
}

Receiver:

import java.io.*;
import java.net.*;
public class Receiver {
    ServerSocket receiver;
    Socket connection = null;
    ObjectOutputStream out;
    ObjectInputStream in ;
    String packet, ack, data = "";
    int i = 0, sequence = 0;
    public Receiver() {}
    public void run() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            receiver = new ServerSocket(2004, 10);
            System.out.println("waiting for connection...");
            connection = receiver.accept();
            sequence = 0;
            System.out.println("Connection established:");
            out = new ObjectOutputStream(connection.getOutputStream());
            out.flush(); in = new ObjectInputStream(connection.getInputStream());
            out.writeObject("connected.");
            do {
                try {
                    packet = (String) in .readObject();
                    if (Integer.valueOf(packet.substring(0, 1)) == sequence) {
                        data += packet.substring(1);
                        sequence = (sequence == 0) ? 1 : 0;
                        System.out.println("\n\nreceiver >" + packet);
                    } else {
                        System.out.println("\n\nreceiver>" + packet + " duplicate data");
                    }
                    if (i < 3) {
                        out.writeObject(String.valueOf(sequence));
                        i++;
                    } else {
                        out.writeObject(String.valueOf((sequence + 1) % 2));
                        i = 0;
                    }
                } catch (Exception e) {}
            } while (!packet.equals("end"));
            System.out.println("Data received=" + data);
            out.writeObject("connection ended.");
        } catch (Exception e) {} finally {
            try { in .close();
                out.close();
                receiver.close();
            } catch (Exception e) {}
        }
    }
    public static void main(String args[]) {
        Receiver s = new Receiver();
        while (true) {
            s.run();
        }
    }
}
/EXP-5

PING

Client:

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;

class PingServer {
    public static void main(String args[]) throws Exception {
        ServerSocket ss = new ServerSocket(5555);
        System.out.println("Server started and listening on port 5555");
        
        Socket s = ss.accept();
        System.out.println("Client connected");
        
        try (BufferedReader dis = new BufferedReader(new InputStreamReader(s.getInputStream()));
             PrintStream out = new PrintStream(s.getOutputStream())) {
            int c = 0;
            while (c < 4) {
                String str = dis.readLine();
                if (str == null) break;  // Handle client disconnection
                out.println("Reply from " + InetAddress.getLocalHost() + "; Length: " + str.length());
                c++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            s.close();
            ss.close();
            System.out.println("Server closed");
        }
    }
}

Server:

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;

class PingClient {
    public static void main(String args[]) throws Exception {
        String str;
        int c = 0;
        long t1, t2;
        Socket s = new Socket("127.0.0.1", 5555);
        
        try (BufferedReader dis = new BufferedReader(new InputStreamReader(s.getInputStream()));
             PrintStream out = new PrintStream(s.getOutputStream())) {
            while (c < 4) {
                t1 = System.currentTimeMillis();
                str = "Welcome to network programming world";
                out.println(str);
                System.out.println(dis.readLine());
                t2 = System.currentTimeMillis();
                System.out.println("TTL=" + (t2 - t1) + "ms");
                c++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            s.close();
        }
    }
}
===================================================================================================
TRACEROUTE

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

class TraceServer {
    public static void main(String args[]) {
        try {
            String str;
            System.out.print("Enter the IP Address to be Traced: ");
            BufferedReader buf1 = new BufferedReader(new InputStreamReader(System.in));
            String ip = buf1.readLine();
            
            // Create a ProcessBuilder object
            ProcessBuilder pb = new ProcessBuilder("tracert", ip);
            Process p = pb.start();

            InputStream in = p.getInputStream();
            BufferedReader buf2 = new BufferedReader(new InputStreamReader(in));

            while ((str = buf2.readLine()) != null) {
                System.out.println(" " + str);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
================================================================================================

EXP-7
Client
import java.io.*;
import java.net.*;

public class Client {
    private static final int PORT = 8080;
    private static final String SERVER_IP = "127.0.0.1";
    private static final int MAX_BUFFER_SIZE = 1024;

    public static void main(String[] args) {
        try {
            Socket socket = new Socket(SERVER_IP, PORT);
            System.out.println("Connected to server: " + SERVER_IP + ":" + PORT);

            BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));
            System.out.print("Enter a message to send to the server: ");
            String message = userInput.readLine();

            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
            out.println(message);
            System.out.println("Message sent to the server.");

            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

server

import java.io.*;
import java.net.*;

public class Server {
    private static final int PORT = 8080;
    private static final int MAX_BUFFER_SIZE = 1024;

    public static void main(String[] args) {
        try {
            ServerSocket serverSocket = new ServerSocket(PORT);
            System.out.println("Server started. Listening on port " + PORT);

            Socket clientSocket = serverSocket.accept();
            System.out.println("Client connected: " + clientSocket.getInetAddress().getHostAddress());

            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            String message = in.readLine();
            System.out.println("Received message from client: " + message);

            clientSocket.close();
            serverSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

=================================================================================================================	

// EXP-8
Creating a socket:

Client:
import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

public class Client {
    public static void main(String args[]) throws Exception {
        Socket soc;
        BufferedImage img = null;
        soc = new Socket("localhost", 4000);
        System.out.println("Client is running.");

        try {
            System.out.println("Reading image from disk.");
            img = ImageIO.read(new File("C:\\Users\\sugit\\OneDrive\\Desktop\\sonalika.jpg"));
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(img, "jpg", baos);
            baos.flush();
            byte[] bytes = baos.toByteArray();
            baos.close();
            System.out.println("Sending image to server.");

            OutputStream out = soc.getOutputStream();
            DataOutputStream dos = new DataOutputStream(out);
            dos.writeInt(bytes.length);
            dos.write(bytes, 0, bytes.length);
            System.out.println("Image sent to server.");

            // Receive response from server (optional)
            InputStream in = soc.getInputStream();

            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String response = br.readLine();
            System.out.println("Server response: " + response);

            dos.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            soc.close();
        }
    }
}

Server: 

import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import javax.swing.*;

public class Server {
    public static void main(String args[]) throws Exception {
        ServerSocket server = null;
        Socket socket;
        server = new ServerSocket(4000);
        System.out.println("Server Waiting for image");

        while (true) {
            socket = server.accept();
            System.out.println("Client connected.");

            // Receive image from client
            InputStream in = socket.getInputStream();
            DataInputStream dis = new DataInputStream(in);
            int len = dis.readInt();
            System.out.println("Image Size: " + len / 1024 + "KB");
            byte[] data = new byte[len];
            dis.readFully(data);

            // Convert byte array to image
            ByteArrayInputStream ian = new ByteArrayInputStream(data);
            BufferedImage bImage = ImageIO.read(ian);

            // Display image in a JFrame (optional)
            JFrame f = new JFrame("Server");
            ImageIcon icon = new ImageIcon(bImage);
            JLabel label = new JLabel(icon);
            f.add(label);
            f.pack();
            f.setVisible(true);

            // Send response to client (optional)
            OutputStream out = socket.getOutputStream();
            PrintWriter pw = new PrintWriter(out, true);
            pw.println("Image received successfully.");

            out.close();
            dis.close();
            in.close();
            socket.close();
        }
    }
}

================================================================================
EXP-9

import java.util.Scanner;

class Subnet {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("IP address: ");
        String ip = sc.nextLine();
        String bip = "";

        for (String part : ip.split("\\.")) {
            bip += String.format("%8s", Integer.toBinaryString(Integer.parseInt(part))).replace(' ', '0');
        }

        System.out.println("Binary Format: " + bip);
        System.out.print("Enter the number of addresses in each subnet: ");
        int n = sc.nextInt();

        int bits = (int) Math.ceil(Math.log(n) / Math.log(2));
        int mask = 32 - bits;
        System.out.println("Subnet mask = " + mask);

        String fip = bip.substring(0, 32 - bits) + "0".repeat(bits);
        String lip = bip.substring(0, 32 - bits) + "1".repeat(bits);

        System.out.print("Network address is = ");
        printAddress(fip);
        System.out.print("Broadcast address is = ");
        printAddress(lip);
    }

    static void printAddress(String bin) {
        for (int i = 0; i < 4; i++) {
            System.out.print(Integer.parseInt(bin.substring(8 * i, 8 * i + 8), 2));
            if (i != 3) System.out.print(".");
        }
        System.out.println();
    }
}

